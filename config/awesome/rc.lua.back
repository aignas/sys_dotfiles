-- vim: filetype=lua:expandtab:shiftwidth=4:tabstop=4:softtabstop=4:textwidth=80:foldmethod=marker

-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
awful.rules = require("awful.rules")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")

-- MPD library
--require("lib/mpd") ; mpc = mpd.new({ hostname="localhost" })
-- Helper functions
local hfunc = require("lib/hfunc")
local acpid = require("lib/acpid")

local kbdee = require("widgets/kbdee")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Some aliases for easier life
local home   = os.getenv("HOME")
local cfgdir = awful.util.getdir("config")
local exec   = awful.util.spawn
local sexec  = awful.util.spawn_with_shell
local docurl = "file:///usr/share/doc/awesome/luadoc/index.html"

-- Themes define colours, icons, and wallpapers
beautiful.init(cfgdir.."/themes/gns-ank/theme.lua")

-- Default application definitions.
prg = {
    terminal = "urxvt",
    editor = os.getenv("EDITOR") 
        or "gvim",
    browser = "firefox",
    mua = os.getenv("XDGMAILER")
        or "thunderbird",
    locker = "lualock -n"
}

-- Default modkey.
mod = {
    A = "Mod1",     -- Alt key
    C = "Control",  -- Control key
    M = "Mod4",     -- Super/Meta modifier
    S = "Shift"     -- Shift modifier
}

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts = {
    awful.layout.suit.max,                -- 1
    awful.layout.suit.tile,               -- 2
    awful.layout.suit.fair,               -- 3
    awful.layout.suit.fair.horizontal,    -- 4
    awful.layout.suit.floating,           -- 5
    awful.layout.suit.max.fullscreen,     -- 6
}
-- }}}

-- {{{ Wallpaper
if beautiful.wallpaper then
    for s = 1, screen.count() do
        gears.wallpaper.maximized(beautiful.wallpaper, s, true)
    end
end
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {
    -- For the primary screen
    { 
        { "α", { layout = layouts[1] } },
        { "β", { layout = layouts[1] } },
        { "γ", { layout = layouts[2] } },
        { "δ", { layout = layouts[2] } },
        { "ε", { layout = layouts[2] } },
        { "ζ", { layout = layouts[2], mwfact = 0.3 } }
    },
    -- For the secondary screen
    {
        { "α", { layout = layouts[1] } },
        { "β", { layout = layouts[1] } },
        { "γ", { layout = layouts[1] } },
    }
}

-- Reformat the tags table
for s = 1, screen.count() do
    local tag = {}
    for i,k in ipairs(tags[s]) do
        table.insert(tag, i, awful.tag.add(k[1], k[2]))
        if i==1 then
            tag[i].selected = true
        end
    end

    tags[s] = tag
end
-- }}}

-- {{{ Menu
-- Default keygrabber keys
awful.menu.menu_keys = {
    up     = { "k", "к", "Up" },
    down   = { "j", "й", "Down"  },
    exec   = { "l", "л", "Right", "Return" },
    back   = { "h", "х", "Left" },
    close  = { "Escape", "Menu" }
}

-- Create a laucher widget and a main menu
mymenu = {}
mymenu.awesome = {
   { "&manual",         prg.terminal .. " -e man awesome" },
   { "LUA &docs",       prg.browser .. " " .. docurl },
   { "&edit config",    prg.editor .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "awm&tt",          "awmtt start -D 2 " },
   { "&restart",        awesome.restart },
   { "&quit",           acpid.awesome_quit }
}

mymenu.docs = {
    { "&Matplotlib doc"    ,    prg.browser .. " /usr/share/doc/matplotlib-1.1.0/html/index.html" },
    { "&Matplotlib gallery",    prg.browser .. " /usr/share/doc/matplotlib-1.1.0/html/gallery.html" },

}

mymenu.web = {
    { "&Browser",       prg.browser },
    { "&MUA",           prg.mua },
    { "&skype",         "skype" }
}

mymenu.devel = {
    { "&ipython",       prg.terminal .. " -e ipython -pylab" },
    { "&sage",          prg.terminal .. " -e sage" },
    { "&mathematica",   "mathematica" },
    { "m&atlab",        "matlab -desktop" },
}

mymenu.main = awful.menu({ 
    items = { 
        { "a&wesome",       mymenu.awesome, beautiful.awesome_icon },
        { "---------",      nil },
        { "&docs",          mymenu.docs},
        { "&MPD client",    prg.terminal .. " -e ncmpcpp" },
    }
})

-- Menubar configuration
menubar.utils.terminal = prg.terminal -- Set the terminal for applications that require it
menubar.utils.wm_name  = "GNOME"
-- }}}

-- {{{ Keyboard switching
-- configure the default layouts
kbdee.cfg.layout = {
    { "gb", "dvorak" },
    { "lt", "std" },
    { "ru", "phonetic" },
    { "fr", "" },
    { "gb", "" },
    { "lt", "" }
}

kbdee.cfg.setxkbmap = {
    model = "thinkpadz60"
}

mykbdmenu = kbdee.layout.menu_gen()
mykbdwi = kbdee.new()
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock(" %d/%m/%y, %H:%M ",60)

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ mod.M }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ mod.M }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )

mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })

    -- Widgets that are aligned to the left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(mylayoutbox[s])
    left_layout:add(mytaglist[s])
    left_layout:add(mypromptbox[s])

    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()
    right_layout:add(mytextclock)
    -- systray is only on the first screen.
    if s == 1 then right_layout:add(wibox.widget.systray()) end
    right_layout:add(mykbdwi)

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)

    mywibox[s]:set_widget(layout)
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymenu.main:toggle({keygrabber=true}) end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ mod.M        }, "Left",   awful.tag.viewprev),
    awful.key({ mod.M        }, "Right",  awful.tag.viewnext),

    awful.key({ mod.M        }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ mod.M        }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({              }, "Menu", function () mymenu.main:show() end),

    -- Layout manipulation
    awful.key({ mod.M, mod.S }, "j", function () awful.client.swap.byidx(  1) end),
    awful.key({ mod.M, mod.S }, "k", function () awful.client.swap.byidx( -1) end),
    awful.key({ mod.M, mod.C }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ mod.M, mod.C }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ mod.M        }, "u", awful.client.urgent.jumpto),
    awful.key({ mod.M        }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ mod.M        }, "Return",  function () exec(prg.terminal .. " -e tmux") end),
    awful.key({ mod.M, mod.S }, "Return",  function () exec(prg.terminal) end),
    awful.key({ mod.M, mod.C }, "r",       function () awesome.restart() end),
    awful.key({ mod.M, mod.S }, "BackSpace", function () acpid.awesome_quit() end),
    awful.key({              }, "Caps_Lock", function () hfunc.caps_notify() end),

    awful.key({ mod.M        }, "l", function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ mod.M        }, "h", function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ mod.M, mod.S }, "l", function () awful.tag.incnmaster(-1)      end),
    awful.key({ mod.M, mod.S }, "h", function () awful.tag.incnmaster( 1)      end),
    awful.key({ mod.M, mod.C }, "l", function () awful.tag.incncol(-1)         end),
    awful.key({ mod.M, mod.C }, "h", function () awful.tag.incncol( 1)         end),
    awful.key({ mod.M        }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ mod.M, mod.S }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ mod.M, mod.S }, "n",   function () awful.client.restore() end),

    -- Utils
    awful.key({ mod.S, mod.A }, "#43", function () mykbdmenu:toggle({ keygrabber = true }) end),
    awful.key({ mod.S, mod.A }, "#44", function () kbdee.layout.switch(1) end),
    awful.key({ mod.S, mod.A }, "#45", function () kbdee.layout.switch(2) end),
    awful.key({ mod.S, mod.A }, "#46", function () kbdee.layout.switch(3) end),
    awful.key({ mod.S, mod.A }, "#47", function () kbdee.layout.switch(5) end),

    -- FIXME make it work properly. Now it just turns off.
    --[[
    awful.key({ }, "XF86AudioPlay", 
        function () 
            local status = mpc:send("status")
            if status.errormsg then
                -- Start mpd is not yet started and start playing
                awful.util.spawn("mpd")
                mpc:send("play")
            else
                mpc:toggle_play()
            end
        end),
    awful.key({ }, "XF86AudioStop", function () mpc:stop() end),
    awful.key({ }, "XF86AudioPrev", function () mpc:previous() end),
    awful.key({ }, "XF86AudioNext", function () mpc:next() end),
    --]]
    --awful.key({ }, "XF86Launch1",   function () sexec("if ps -A | grep pavucontrol; then pkill pavucontrol; else pavucontrol; fi") end),
    --awful.key({ mod.M }, "XF86Launch1",   function () sexec(prg.terminal .. " -e alsamixer") end),
    --awful.key({ }, "XF86AudioRaiseVolume", function () sexec("pmixer up") end),
    --awful.key({ }, "XF86AudioLowerVolume", function () sexec("pmixer down") end),
    --awful.key({ }, "XF86AudioMute", function () sexec("pmixer mute") end),

    -- ACPI
    -- Empty bindings to not have any special keys grabbed by programs.
    --awful.key({ }, "XF86ScreenSaver",   function () end),   -- Fn + F2
    --awful.key({ }, "XF86Battery",       function () end),   -- Fn + F3
    --awful.key({ }, "XF86Sleep",         function () end),   -- Fn + F4
    --awful.key({ }, "XF86WLAN",          function () end),   -- Fn + F5
    --awful.key({ }, "XF86WebCam",        function () end),   -- Fn + F6
    --awful.key({ }, "XF86Display",       function () end),   -- Fn + F7
    --awful.key({ }, "XF86Suspend",       function () end),   -- Fn + F12

    awful.key({ mod.M, mod.S }, "i",   function () hfunc.lua_xev() end),
    -- FIXME rewrite thing to use some menus and udisks directly
    awful.key({ mod.M,       }, "d",
            function()
                local s = mouse.screen
                local t = awful.tag.getidx()
                if t then
                    awful.tag.viewnone()
                else
                    awful.tag.history.restore(s)
                end
            end),

    -- Prompt
    awful.key({ mod.M, mod.S }, "r",     
            function () 
                awful.prompt.run({ 
                    prompt = "Zsh: " 
                }, mypromptbox[mouse.screen].widget,
                function (...) 
                    mypromptbox[mouse.screen].text = exec(unpack(arg), false)
                end,
                awful.completion.shell, awful.util.getdir("cache") .. "/history",
                50)
            end),

    awful.key({ mod.M        }, "x",
              function ()
                  awful.prompt.run({ prompt = "Lua: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end),
    -- Menubar
    awful.key({ mod.M        }, "r", function() menubar.show() end)
)

clientkeys = awful.util.table.join(
    awful.key({ mod.M,       }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ mod.M,       }, "Escape", function (c) c:kill()                         end),
    awful.key({ mod.M, mod.C }, "space",  awful.client.floating.toggle                     ),
    awful.key({ mod.M, mod.C }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ mod.M,       }, "o",      awful.client.movetoscreen                        ),
    awful.key({ mod.M,       }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ mod.M,       }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ mod.M,       }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end),
    awful.key({ mod.M        }, "i", function (c) hfunc.client_prop(c) end),
    awful.key({ mod.M, mod.C }, "i", function (c) hfunc.client_prop_all(c) end)
)

-- Compute the maximum number of digit we need, limited to 6
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(6, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ mod.M }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ mod.M, mod.C }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ mod.M, mod.S }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ mod.M, mod.C, mod.S }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ mod.M }, 1, awful.mouse.client.move),
    awful.button({ mod.M }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     size_hints_honor = false,
                     keys = clientkeys,
                     buttons = clientbuttons,
                 } 
    },
    -- floating clients
    { rule_any = { 
        class = { "mplayer2", "fontforge" },
        instance = { "arandr", "gimp", "nitrogen", "pavucontrol", "matplotlib" }, 
        name = { "Event Tester", "Welcome to Wolfram Mathematica 8" }
    },
      properties = { floating = true } },
    -- Gnome3 stuff
    { rule = { class = "Nautilus", instance = "desktop_window" },
      properties = { sticky = true, border_width = 0, skip_taskbar = true, focus = false } },
    -- JACK stuff
    { rule = { instance = "qjackctl" },
      properties = { ontop = true, floating = true, sticky = true } },
    -- Ardour:
    { rule = { class = "Ardour" },
      properties = { floating = true } },
    { rule = { instance = "ardour_editor" },
      properties = { floating = false, 
                     maximized_vertical = true,
                     maximized_horizontal = true } },
    -- Flash
    { rule = { class = "Plugin-container" },
      properties = { floating =  true } },
    -- Xephyr
    { rule = { instance = "Xephyr" },
        properties = { border_width = 0, floating = true } },
    -- Workrave
    { rule = { name = "Workrave", instance = "workrave", class = "Workrave" },
      properties = { ontop = true, floating = true, sticky = true } },
    { rule = { class = "Ipython"},
      properties = { floating = true, ontop = true, sticky = true } },
    { rule = { class = "Skype" },
      properties = { tag = tags[1][6] } },
    { rule = { name = "Call with", class = "Skype" },
      properties = { floating = true, ontop = true } },
    { rule = { class = "Skype", instance = "skype", name = "Options" },
      properties = { floating = true } },
    -- Web browsers and MUAs
    { rule_any = { 
        instance = { "Navigator" },
        class = { "Icecat", "Firefox", "Chromium", "luakit" }
    },
      properties = { tag = tags[screen.count()][2] } },
    { rule = { class = "Sushi-start", instance = "sushi-start" },
      properties = { floating = true, border_width = 0,
            --[[callback = function (c)
                geo = c:geometry()
                wa = screen[c.screen].workarea
                geo.x = (wa.width - geo.width)/2
                geo.y = (wa.height - geo.height)/2
                c:geometry(geo)
            end --]]
        } },
    { rule = { class = "Thunderbird" },
      properties = { tag = tags[1][5] } },
    -- Icon defeinitions
    { rule = { instance = "urxvt" },
      properties = { icon = awesome.load_image(theme.icon.terminal) } },
    { rule = { instance = "gvim" },
      properties = { icon = awesome.load_image(theme.icon.editor) } },
}
-- }}}

-- {{{ Signals

-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
    local titlebars_enabled = false
    if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
        -- Widgets that are aligned to the left
        local left_layout = wibox.layout.fixed.horizontal()
        left_layout:add(awful.titlebar.widget.iconwidget(c))

        -- Widgets that are aligned to the right
        local right_layout = wibox.layout.fixed.horizontal()
        right_layout:add(awful.titlebar.widget.floatingbutton(c))
        right_layout:add(awful.titlebar.widget.maximizedbutton(c))
        right_layout:add(awful.titlebar.widget.stickybutton(c))
        right_layout:add(awful.titlebar.widget.ontopbutton(c))
        right_layout:add(awful.titlebar.widget.closebutton(c))

        -- The title goes in the middle
        local title = awful.titlebar.widget.titlewidget(c)
        title:buttons(awful.util.table.join(
                awful.button({ }, 1, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.move(c)
                end),
                awful.button({ }, 3, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.resize(c)
                end)
                ))

        -- Now bring it all together
        local layout = wibox.layout.align.horizontal()
        layout:set_left(left_layout)
        layout:set_right(right_layout)
        layout:set_middle(title)

        awful.titlebar(c):set_widget(layout)
    end
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
